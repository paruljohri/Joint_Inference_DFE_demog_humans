#Pipeline to get stats from human data:
#Notes about 0 vs 1 based positions:
#The annotation file for exons is 1-based.
#The phastcons elements are in 0-based format.

Step 0: Filter sites:
bash run_get_usable_neutral_sites.sh
which useses the script:
get_usable_neutral_sites_v2.py

Step 1: get SNPs for relevant regions fromt eh phase 3 data:
sbatch run_get_exon_vcfs_numbp50.sh
(python get_exon_vcfs_numbp50.py)

Step 2: Add a filter here that exlcudes all sites not in the accessibiility files and not in phastcons elements:
python filter_vcfs.py YRI_50

Step 2: Convert the vcf into ms files. This step includes taking the strand information into account and aligning them so that its always intergenic first and then the exon:
python convert_vcf_to_ms_numbp50.py YRI_50

Step 3: Calculate stats using pylibseq
python statistics_bigwindow_pylibseq_SingExon_human_phase3.py -yriFolder YRI_50 -region exon
python statistics_bigwindow_pylibseq_SingExon_human_phase3.py -yriFolder YRI_50 -region 5p
python statistics_bigwindow_pylibseq_SingExon_human_phase3.py -yriFolder YRI_50 -region 3p

Step 4: summarize using R:
Rscript get_final_statistics_phase3.R YRI_50 exon
Rscript get_final_statistics_phase3.R YRI_50 5p
Rscript get_final_statistics_phase3.R YRI_50 3p


Getting divergence values:
Step 5: Write out alignements for all exons first to double check the sequences:
bash run_get_sequences_single_exons.sh 
#there are some options you can change internally in this script. It gets fasta sequences from the ancestor, hg19 and grch37 reference genomes without any filtering at this point.

Step 6: Write out sequences for all sites that are polymorphic:
This script also filters out the sites based on accessibility.
python convert_vcf_to_fa_numbp50.py YRI_50
#these are in the same orientation as the SNP (.ms) files

Step 7: calculate divergence:
python calculate_divergence.py YRI_50 exon
python calculate_divergence.py YRI_50 5p
python calculate_divergence.py YRI_50 3p

Step 8: summarize divergence:
Rscript get_final_divergence_phase3.R YRI_50 exon
Rscript get_final_divergence_phase3.R YRI_50 5p
Rscript get_final_divergence_phase3.R YRI_50 3p

Step 9: get final stats in ABC format
python get_all_statistics_phase3_abc.py YRI_50



Step 10: To get stats of sets of exons categorized by high and low divergence:
python get_stats_by_div.py 5p
python get_stats_by_div.py exon
python get_stats_by_div.py 3p

Rscript get_final_statistics_phase3_by_category.R exon low_div
Rscript get_final_statistics_phase3_by_category.R exon high_div

Rscript get_final_statistics_phase3_by_category.R 5p low_div
Rscript get_final_statistics_phase3_by_category.R 5p high_div
Rscript get_final_statistics_phase3_by_category.R 3p low_div                    
Rscript get_final_statistics_phase3_by_category.R 3p high_div

Rscript get_final_divergence_phase3_by_category.R exon low_div
Rscript get_final_divergence_phase3_by_category.R exon high_div

Rscript get_final_divergence_phase3_by_category.R 5p low_div
Rscript get_final_divergence_phase3_by_category.R 5p high_div
Rscript get_final_divergence_phase3_by_category.R 3p low_div                    
Rscript get_final_divergence_phase3_by_category.R 3p high_div

python get_all_statistics_phase3_by_category_abc.py low_div
python get_all_statistics_phase3_by_category_abc.py high_div


>>Here are some of the final files provided (including the stats):
-STATS_FILTERED.zip //stats for all single exons, including final divergence values
-MS_FILTERED //.ms files of all single exons post-filtering
-FASTA //All single exons aligned to the ancestor. Not filtered.
-FILTERED_SITES.zip //the set of all sites filtered/masked/excluded for each exon + intergenic
