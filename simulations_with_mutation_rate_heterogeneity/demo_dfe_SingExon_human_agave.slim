//To run:
//on OSG!!!
//slim -d d_seed=seed -d d_scaling_factor=10 -d d_Nanc_scaled=20000 -d d_growth=1.001 -d d_f0=f0 -d d_f1=f1 -d d_f2=f2 -d d_f3=f3 -d d_rec_rate=10 -d d_inter_len=5000 -d d_exon_len=2000 -d "d_simID='1'" -d "d_repID='1'" demo_dfe_SingExon_human.slim
//slim -d d_seed=1 -d d_Nanc_scaled=5525 -d d_scaling_factor=6 -d d_growth=0.9912650744270609 -d d_f0=25 -d d_f1=25 -d d_f2=25 -d d_f3=25 -d d_rec_rate=10 -d d_inter_len=5000 -d d_exon_len=6000 -d "d_simID='1'" -d "d_geneID='1'" -d "d_repID='1'" demo_dfe_SingExon_human.slim
//Human parameters. Simualtions with correlated gene conversion. Priors on Nanc and Ncur.
//mu = 1.25 x 10-8, rec = rec_rate * 10^-8, geneconv = 5*rec, tractlen=125bp, 2Nes = [0, -1, -10, -100, -2sNanc], time of change = ?
//scaling factor = 1
//scaled mu = 1.25 x 10-8, rec = rec_rate * 10^-8, totrec = 6*rec, scaled time of change = ?
//This is a discrete DFE model with 4 bins
//Demographic changes will be exponential, read from a file.
//seed will be?
initialize()
{
    setSeed(d_seed);
    defineConstant("scale", d_scaling_factor);
    defineConstant("Na", d_Nanc_scaled);
    //selection coefficients:
    defineConstant("t0", 0.0);
    defineConstant("t1", -1.0/(2*Na));
    defineConstant("t2", -10.0/(2*Na));
    defineConstant("t3", -100.0/(2*Na));
    defineConstant("t4", -1.0);
    print(Na);
    print(t0);
    print(t1);
    print(t2);
    print(t3);
    print(t4);
    //recombination and geneconversion rate:
    defineConstant("mu_rate", scale*1.25*1e-8);                                        
    defineConstant("r_rate", d_rec_rate*scale*1e-8);
    defineConstant("g_rate", 5*r_rate);                           
    defineConstant("tot_rate", g_rate+r_rate);                                  
    defineConstant("g_frac", g_rate/tot_rate);

    // set the overall mutation rate
    initializeMutationRate(mu_rate);
    
    // mutation types: 
    initializeMutationType("m1", 0.5, "s", "return runif(1, t1, t0);"); //neutral, 2Nes = [0,-1]
    initializeMutationType("m2", 0.5, "s", "return runif(1, t2, t1);"); // -1<2Nes<-10, uniform distribution
    initializeMutationType("m3", 0.5, "s", "return runif(1, t3, t2);"); //moderately deleterious, -10<2Nes<-100, uniform distribution
    initializeMutationType("m4", 0.5, "s", "return runif(1, t4, t3);"); //strongly deleterious, 2Nes>=-100, uniform distribution
        
    
    // g1 genomic element type: uses m1 for all mutations
    initializeGenomicElementType("g1", m1, 1.0); //intergenic
    initializeGenomicElementType("g2", c(m1, m2, m3, m4), c(d_f0, d_f1, d_f2, d_f3)); //functional: weakly deleterious, gamma
    
    //chromosome with a single functional element on one side
    initializeGenomicElement(g1, 0, d_inter_len-1);
    initializeGenomicElement(g2, d_inter_len, d_inter_len+d_exon_len);
    
    // uniform recombination along the chromosome
    initializeRecombinationRate(tot_rate);
    initializeGeneConversion(g_frac, 125); 
}

// part 1 (burn-in for gen_burnin (=14Nanc) generations): create a population of N_anc individuals
1 {
    sim.addSubpop("p1", Na);
}
// part 2: exponential size change for XX generations: reaches size N_cur
gen_burnin: {
    newSize = round(d_growth^(sim.generation - gen_burnin) * Na);
    p1.setSubpopulationSize(asInteger(newSize));
}
//print genotypes of 100 individuals selected randomly without replacement:
gen_stop late() {
    p1.outputMSSample(100, F, "*", d_folder + "/sim" + d_simID + "_gene" + d_geneID + "_rep" + d_repID + ".ms", F);
    //print size of population to check
    print(p1.individualCount);
}
//print all fixed mutations
gen_stop late(){sim.outputFixedMutations(d_folder + "/sim" + d_simID + "_gene" + d_geneID + "_rep" + d_repID + ".fixed", append=F);}
gen_stop { }
