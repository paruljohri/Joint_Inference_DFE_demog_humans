#This script is to filter ms files generated by simulations according to the filtering performed in the actual data.
import sys
import os

simID = sys.argv[1]
int_region = sys.argv[2] #"5p" or "3p"
folder = sys.argv[3]
#folder="demo_dfe_SingExon_human_v2"

#function for reading a fasta file:
def read_fasta(FILE):    
    d_SEQ = {}               
    for line in FILE:
        line1 = line.strip('\n')
        if line1[0] == ">":           
            s_seq_name = line1.replace(">", "")         
            d_SEQ[s_seq_name] = ""         
        else:  
            d_SEQ[s_seq_name] = d_SEQ[s_seq_name] + line1
    return(d_SEQ)

def get_posn_from_sequence(s_seq):
    l_positions = []
    seq_len = len(s_seq)
    x_POSN = 0
    for x in s_seq:
        if x != "N":
            l_positions.append(x_POSN)
        x_POSN = x_POSN + 1
    return(l_positions)

#read ms file with positions in their integer forms (multiplied by the length)
#positions are 0-based and normalized consistent with SLiM
def read_subset_ms(f_ms, start, end, len_region):
    d_pos = {} #num of SNP -> scaled integer postion
    d_geno = {}#num of SNP -> genotypes
    l_num_snps = []#list of number of SNPs
    for line in f_ms:
        line1 = line.strip('\n')
        if "positions" in line1:
            line2 = line1.split()
            i = 0
            for x in line2:
                if "position" not in x:
                    if (float(x) >= float(start)) and (float(x) <= float(end)):
                        x_int = round(float(x)*(len_region-1))
                        d_pos[i] = x_int
                        d_geno[i] = ""
                        l_num_snps.append(i)
                    i = i + 1
            #print(l_int_posn)
        elif "//" not in line and "segsites" not in line:
            for j in l_num_snps:
                d_geno[j] = d_geno[j] + line1[j]
    return (l_num_snps, d_pos, d_geno)

#write ms file when positions might be known as integers:
#positions are 0-based and normalized consistent with SLiM
def write_ms_file(result, l_NUM_SNPS, d_POSN, d_GT, len_region):
    result.write("//" + '\n')
    result.write("segsites: " + str(len(l_NUM_SNPS)) + '\n')
    result.write("positions:")
    for snp in l_NUM_SNPS:
        POSN_NORM = round(float(d_POSN[snp])/float(len_region-1),7)
        result.write(" " + str(POSN_NORM))
    result.write('\n')
    if len(l_NUM_SNPS) > 0:
        num_indv = len(d_GT[l_NUM_SNPS[0]])
        indv = 0
        while indv < num_indv:
            for snp in l_NUM_SNPS:
                #print(indv)
                result.write(d_GT[snp][indv])
            result.write('\n')
            indv += 1
    return ("written to file")

#get the list of exons:
l_exons = []
d_len = {}
os.system("cp /home/pjohri1/BgsDfeDemo_Human/Humans/single_exon_coordinates.txt /scratch/pjohri1/BgsDfeDemo_Human/" + folder + "/sim" + str(simID))
f_exons = open("/scratch/pjohri1/BgsDfeDemo_Human/" + folder + "/sim" + str(simID) + "/single_exon_coordinates.txt",'r')
for line in f_exons:
    line1 = line.strip('\n')
    line2 = line1.split('\t')
    if line2[0] != "exon":
        s_exon = line2[0]
        if s_exon not in l_exons:
            l_exons.append(s_exon)
        if line2[1] == "exon" or line2[1] == int_region:
            try:
                d_len[s_exon] = d_len[s_exon] + int(line2[4]) - int(line2[3]) + 1
            except:
                d_len[s_exon] = 0
                d_len[s_exon] = d_len[s_exon] + int(line2[4]) - int(line2[3]) + 1
f_exons.close()
print(l_exons)

#read the files for the exon and the relevant intergenic region and concatenate themwith the intergenic first and the exon last.
#store this information in a dict.
for exon in l_exons:
    print(exon)
    f_exon = open("/home/pjohri1/BgsDfeDemo_Human/Humans/Exons/Numbp50/YRI_50/FASTA_FILTERED/" + exon + "_exon.fa", 'r')
    d_exon = read_fasta(f_exon)
    #print(d_exon)
    f_exon.close()
    f_inter = open("/home/pjohri1/BgsDfeDemo_Human/Humans/Exons/Numbp50/YRI_50/FASTA_FILTERED/" + exon + "_" + int_region + ".fa", 'r')
    d_inter = read_fasta(f_inter)
    f_inter.close()
    s_seq = d_inter[''] + d_exon['']
    l_filt_posns = get_posn_from_sequence(s_seq)
    
    #Go through the relevant simulation ID and filter those files -> write into new ms and substitution files:
    exon_num = exon.split('_')[0]
    f_ms = open("/scratch/pjohri1/BgsDfeDemo_Human/" + folder + "/sim" + str(simID) + "/sim" + str(simID) + "_" + exon_num.replace("exon", "gene") + "_rep1.ms", 'r')
    t_ms = read_subset_ms(f_ms, 0.0, 1.0, len(s_seq))
    l_ms_snps = t_ms[0]#number of each SNP
    d_ms_pos = t_ms[1]#SNP number -> interger position
    d_ms_geno = t_ms[2]#SNP number -> genotype
    if "335" in exon:
        print(d_ms_pos)
        print(d_ms_geno)
    #filter positions:
    l_ms_snps_filtered = []
    for x in l_ms_snps:
        if d_ms_pos[x] in l_filt_posns:
            l_ms_snps_filtered.append(x)
    
    #write filtered ms file:
    result = open("/scratch/pjohri1/BgsDfeDemo_Human/" + folder + "/sim" + str(simID) + "/sim" + str(simID) + "_" + exon_num.replace("exon", "gene") + "_rep1_filtered.ms", 'w+')
    write_ms_file(result, l_ms_snps_filtered, d_ms_pos, d_ms_geno, len(s_seq))
    result.close()

    #open and filter the substitution file:
    f_sub = open("/scratch/pjohri1/BgsDfeDemo_Human/" + folder + "/sim" + str(simID) + "/sim" + str(simID) + "_" + exon_num.replace("exon", "gene") + "_rep1.fixed", 'r')
    result = open("/scratch/pjohri1/BgsDfeDemo_Human/" + folder + "/sim" + str(simID) + "/sim" + str(simID) + "_" + exon_num.replace("exon", "gene") + "_rep1_filtered.fixed", 'w+')
    for line in f_sub:
        if line[0] == "#":
            result.write(line)
        elif "Mutations" in line:
            result.write(line)
        elif "m1" in line and "p1" in line:
            line1 = line.strip('\n')
            line2 = line1.split()
            if int(line2[3]) in l_filt_posns:
                result.write(line)
    result.close()

print("done")



